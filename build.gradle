plugins {
    id "java-library"
    id "idea"
    id 'net.neoforged.gradle.userdev' version '7.0.+'
    //id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id "com.modrinth.minotaur" version "2.+"
    id 'net.darkhax.curseforgegradle' version '1.+'
}

version = "${project.mod_version}"
group = "${project.mod_namespace}"
base {
    archivesName = "${project.mod_name}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

runs {
    configureEach {
        //systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        modSource project.sourceSets.main
    }
    client {
        workingDirectory project.file('run')
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }
    server {
        workingDirectory project.file('run_server')
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }
    gameTestServer {
        workingDirectory project.file('run_gametest')
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }
    data {
        workingDirectory project.file('run_data')
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenLocal()
    maven {
        url = "https://maven.blamejared.com/"
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${project.forge_version}"
    //implementation fg.deobf("mezz.jei:jei-${project.jei_version}")
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            mod_loader: "javafml",
            loader_version: "${project.valid_forge_versions}",
            license: "${project.license}",
            mod_id: "${project.mod_id}",
            mod_version: "${project.mod_version}",
            mc_version_range: "${project.mc_version_range}"
    ]
    inputs.properties replaceProperties
    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}


/*jar {
    manifest {
        attributes([
                "Specification-Title": "${project.mod_name}",
                "Specification-Vendor": "canitzp",
                "Specification-Version": "1",
                "Implementation-Title": "${project.mod_name}",
                "Implementation-Version": "${project.mod_version}",
                "Implementation-Vendor" :"canitzp",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}*/

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

idea {
    module {
        inheritOutputDirs = true
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "roZbVc2D"
    versionNumber = "${project.mod_version}"
    versionName = "${project.mod_name} - ${project.mod_version} (for ${project.mc_version})"
    versionType = "release"
    uploadFile = jar
    gameVersions = project.release_minecraft_versions.split("/").collect()
    loaders = project.release_mod_loaders.toLowerCase().split("/").collect()
    changelog = String.join("\n", rootProject.file("CHANGELOG.md").text.lines().takeWhile(s -> !s.isEmpty()).toList())
    syncBodyFrom = rootProject.file("README.md").text
}

tasks.modrinth.dependsOn(tasks.modrinthSyncBody)

//noinspection UnnecessaryQualifiedReference
task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    group = "publishing"
    apiToken = System.getenv('CURSEFORGE_TOKEN')

    def mainFile = upload(561733, jar)
    mainFile.displayName = "${project.mod_name} - ${project.mod_version} (for ${project.mc_version})"
    mainFile.releaseType = "release"
    mainFile.changelogType = 'markdown'
    mainFile.changelog = file("CHANGELOG.md")
    for (final def modloader in "${project.release_mod_loaders}".split("/")) {
        mainFile.addModLoader("${modloader}")
    }
    for (final def java_version in "${project.release_java_versions}".split("/")) {
        mainFile.addJavaVersion("${java_version}")
    }
    for (final def minecraft_version in "${project.release_minecraft_versions}".split("/")) {
        mainFile.addGameVersion("${minecraft_version}")
    }
}